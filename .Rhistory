Time <- factors$Date
factors <- factors[, -1]
# Convert the factors to a timeSeries object
Factors <- timeSeries(factors, Time)
# Define initial and out-of-sample factor periods
initial_factors <- Factors[1:624, ]
out_of_sample_factors <- Factors[625:672, ]
# Verify the factors
print(head(initial_factors))
print(head(out_of_sample_factors))
# Convert timeSeries objects to data frames
initial_estimation_df <- as.data.frame(initial_estimation_period)
initial_factors_df <- as.data.frame(initial_factors)
# Initialize a vector to store Sharpe ratios
sharpe_ratios <- numeric(ncol(initial_estimation_df))
# Calculate Sharpe ratio for each fund
for (i in 1:ncol(initial_estimation_df)) {
fund_data <- xts(initial_estimation_df[, i], order.by = as.Date(rownames(initial_estimation_df)))
sharpe_ratios[i] <- SharpeRatio.annualized(fund_data, scale = 12)
}
# Set column names
names(sharpe_ratios) <- colnames(initial_estimation_df)
print("Sharpe Ratios:")
print(head(sharpe_ratios))
# Initialize a vector to store Treynor ratios
treynor_ratios <- numeric(ncol(initial_estimation_df))
# Calculate Treynor ratio for each fund
for (i in 1:ncol(initial_estimation_df)) {
fund_data <- xts(initial_estimation_df[, i], order.by = as.Date(rownames(initial_estimation_df)))
market_data <- xts(initial_factors_df[, "Mkt.RF"], order.by = as.Date(rownames(initial_factors_df)))
treynor_ratios[i] <- TreynorRatio(fund_data, Rb = market_data, Rf = 0)
}
# Set column names
names(treynor_ratios) <- colnames(initial_estimation_df)
print("Treynor Ratios:")
print(head(treynor_ratios))
# Initialize a vector to store Jensen's alpha values using S&P500
jensens_alpha_single <- numeric(ncol(initial_estimation_df))
# Calculate Jensen's alpha using S&P500 as the market factor for each fund
market_data <- xts(initial_factors_df[, "Mkt.RF"], order.by = as.Date(rownames(initial_factors_df)))
for (i in 1:ncol(initial_estimation_df)) {
fund_data <- xts(initial_estimation_df[, i], order.by = as.Date(rownames(initial_estimation_df)))
model <- lm(fund_data ~ market_data)
jensens_alpha_single[i] <- coef(model)[1]  # Intercept is Jensen's alpha
}
# Set column names
names(jensens_alpha_single) <- colnames(initial_estimation_df)
print("Jensen's Alpha using Single Factor Model (S&P500):")
print(head(jensens_alpha_single))
# Initialize a vector to store Jensen's alpha values using multiple regression model
jensens_alpha_multiple <- numeric(ncol(initial_estimation_df))
X <- as.matrix(initial_factors_df[, c("Mkt.RF", "SMB", "HML")])  # Adjust column names as per your data
for (i in 1:ncol(initial_estimation_df)) {
fund_data <- initial_estimation_df[, i]
model <- lm(fund_data ~ X)
jensens_alpha_multiple[i] <- coef(model)[1]  # Intercept is Jensen's Alpha
}
# Set column names
names(jensens_alpha_multiple) <- colnames(initial_estimation_df)
print("Jensen's Alpha using Multiple Regression Model:")
print(head(jensens_alpha_multiple))
# Initialize a vector to store Sortino ratios
sortino_ratios <- numeric(ncol(initial_estimation_df))
# Calculate Sortino ratio for each fund
for (i in 1:ncol(initial_estimation_df)) {
fund_data <- xts(initial_estimation_df[, i], order.by = as.Date(rownames(initial_estimation_df)))
sortino_ratios[i] <- SortinoRatio(fund_data, MAR = 0, scale = 12)
}
# Set column names
names(sortino_ratios) <- colnames(initial_estimation_df)
print("Sortino Ratios:")
print(head(sortino_ratios))
# Number of funds to select (top 20%)
num_funds <- ceiling(0.2 * ncol(initial_estimation_df))
# Select the top 20% funds based on Sharpe ratios
top_funds_indices <- order(sharpe_ratios, decreasing = TRUE)[1:num_funds]
top_funds <- colnames(initial_estimation_df)[top_funds_indices]
print("Top 20% Funds Based on Sharpe Ratios:")
print(top_funds)
# Select the returns of the top funds for the out-of-sample period
selected_returns <- out_of_sample_period[, top_funds_indices]
# Construct an equally weighted portfolio
equal_weights <- rep(1 / num_funds, num_funds)  # Equal weights for each fund
# Calculate the portfolio returns
portfolio_returns <- rowMeans(selected_returns, na.rm = TRUE)
# Convert to a timeSeries object
portfolio_returns_ts <- timeSeries(portfolio_returns, time(out_of_sample_period))
print("Equally Weighted Portfolio Returns (Out-of-Sample Period):")
print(head(portfolio_returns_ts))
# Select the top 20% funds based on Treynor ratios
top_funds_treynor_indices <- order(treynor_ratios, decreasing = TRUE)[1:num_funds]
top_funds_treynor <- colnames(initial_estimation_df)[top_funds_treynor_indices]
print("Top 20% Funds Based on Treynor Ratios:")
print(top_funds_treynor)
# Select the returns of the top funds for the out-of-sample period
selected_returns_treynor <- out_of_sample_period[, top_funds_treynor_indices]
# Construct an equally weighted portfolio
portfolio_returns_treynor <- rowMeans(selected_returns_treynor, na.rm = TRUE)
# Convert to a timeSeries object
portfolio_returns_treynor_ts <- timeSeries(portfolio_returns_treynor, time(out_of_sample_period))
print("Equally Weighted Portfolio Returns Based on Treynor Ratios (Out-of-Sample Period):")
print(head(portfolio_returns_treynor_ts))
# Select the top 20% funds based on Jensen's alpha using single factor model
top_funds_jensens_indices <- order(jensens_alpha_single, decreasing = TRUE)[1:num_funds]
top_funds_jensens <- colnames(initial_estimation_df)[top_funds_jensens_indices]
print("Top 20% Funds Based on Jensen's Alpha (Single Factor Model):")
print(top_funds_jensens)
# Select the returns of the top funds for the out-of-sample period
selected_returns_jensens <- out_of_sample_period[, top_funds_jensens_indices]
# Construct an equally weighted portfolio
portfolio_returns_jensens <- rowMeans(selected_returns_jensens, na.rm = TRUE)
# Convert to a timeSeries object
portfolio_returns_jensens_ts <- timeSeries(portfolio_returns_jensens, time(out_of_sample_period))
print("Equally Weighted Portfolio Returns Based on Jensen's Alpha (Out-of-Sample Period):")
print(head(portfolio_returns_jensens_ts))
# Select the top 20% funds based on Sortino ratios
top_funds_sortino_indices <- order(sortino_ratios, decreasing = TRUE)[1:num_funds]
top_funds_sortino <- colnames(initial_estimation_df)[top_funds_sortino_indices]
print("Top 20% Funds Based on Sortino Ratios:")
print(top_funds_sortino)
# Select the returns of the top funds for the out-of-sample period
selected_returns_sortino <- out_of_sample_period[, top_funds_sortino_indices]
# Construct an equally weighted portfolio
portfolio_returns_sortino <- rowMeans(selected_returns_sortino, na.rm = TRUE)
# Convert to a timeSeries object
portfolio_returns_sortino_ts <- timeSeries(portfolio_returns_sortino, time(out_of_sample_period))
print("Equally Weighted Portfolio Returns Based on Sortino Ratios (Out-of-Sample Period):")
print(head(portfolio_returns_sortino_ts))
# Define risk-free rate
Rf <- 0  # Assuming risk-free rate is 0 for simplicity
# Calculate Sharpe ratio for each portfolio
sharpe_ratio_portfolio <- SharpeRatio.annualized(portfolio_returns_ts, Rf = Rf, scale = 12)
sharpe_ratio_portfolio_treynor <- SharpeRatio.annualized(portfolio_returns_treynor_ts, Rf = Rf, scale = 12)
sharpe_ratio_portfolio_jensens <- SharpeRatio.annualized(portfolio_returns_jensens_ts, Rf = Rf, scale = 12)
sharpe_ratio_portfolio_sortino <- SharpeRatio.annualized(portfolio_returns_sortino_ts, Rf = Rf, scale = 12)
# Calculate Sortino ratio for each portfolio
sortino_ratio_portfolio <- SortinoRatio(portfolio_returns_ts, MAR = Rf, scale = 12)
sortino_ratio_portfolio_treynor <- SortinoRatio(portfolio_returns_treynor_ts, MAR = Rf, scale = 12)
sortino_ratio_portfolio_jensens <- SortinoRatio(portfolio_returns_jensens_ts, MAR = Rf, scale = 12)
sortino_ratio_portfolio_sortino <- SortinoRatio(portfolio_returns_sortino_ts, MAR = Rf, scale = 12)
# Print the results
cat("Sharpe Ratio (Sharpe Criterion):", sharpe_ratio_portfolio, "\n")
cat("Sharpe Ratio (Treynor Criterion):", sharpe_ratio_portfolio_treynor, "\n")
cat("Sharpe Ratio (Jensen’s Alpha Criterion):", sharpe_ratio_portfolio_jensens, "\n")
cat("Sharpe Ratio (Sortino Criterion):", sharpe_ratio_portfolio_sortino, "\n")
cat("Sortino Ratio (Sharpe Criterion):", sortino_ratio_portfolio, "\n")
cat("Sortino Ratio (Treynor Criterion):", sortino_ratio_portfolio_treynor, "\n")
cat("Sortino Ratio (Jensen’s Alpha Criterion):", sortino_ratio_portfolio_jensens, "\n")
cat("Sortino Ratio (Sortino Criterion):", sortino_ratio_portfolio_sortino, "\n")
# Plot cumulative returns for each portfolio
plot(cumprod(1 + portfolio_returns_ts), main = "Cumulative Returns of Portfolios", col = "blue", lwd = 2, xlab = "Date", ylab = "Cumulative Returns")
lines(cumprod(1 + portfolio_returns_treynor_ts), col = "red", lwd = 2)
lines(cumprod(1 + portfolio_returns_jensens_ts), col = "green", lwd = 2)
lines(cumprod(1 + portfolio_returns_sortino_ts), col = "purple", lwd = 2)
# Adjust legend position
legend("topleft", legend = c("Sharpe Criterion", "Treynor Criterion", "Jensen’s Alpha", "Sortino Criterion"), col = c("blue", "red", "green", "purple"), lwd = 2, cex = 0.8)
# Initialize a vector to store Jensen's alpha values using multiple regression model
jensens_alpha_multiple <- numeric(ncol(initial_estimation_df))
X <- as.matrix(initial_factors_df[, c("Mkt.RF", "SMB", "HML")])  # Adjust column names as per your data
for (i in 1:ncol(initial_estimation_df)) {
fund_data <- initial_estimation_df[, i]
model <- lm(fund_data ~ X)
jensens_alpha_multiple[i] <- coef(model)[1]  # Intercept is Jensen's Alpha
}
# Set column names
names(jensens_alpha_multiple) <- colnames(initial_estimation_df)
print("Jensen's Alpha using Multiple Regression Model:")
print(head(jensens_alpha_multiple))
# Initialize a vector to store Jensen's alpha values using GARCH model
jensens_alpha_garch <- numeric(ncol(initial_estimation_df))
# Loop through each fund
for (i in 1:ncol(initial_estimation_df)) {
fund_data <- na.omit(as.numeric(initial_estimation_df[, i]))  # Ensure data is numeric and remove NAs
# Fit the GARCH model only if there are enough observations and sufficient variability
if (length(fund_data) > 1 && sd(fund_data) != 0) {
tryCatch({
garch_model <- garchFit(~ garch(1, 1), data = fund_data, trace = FALSE)
alpha <- coef(garch_model)["mu"]
jensens_alpha_garch[i] <- alpha  # Store alpha from GARCH model
}, error = function(e) {
jensens_alpha_garch[i] <- NA  # Handle model fitting errors
})
} else {
jensens_alpha_garch[i] <- NA  # Handle insufficient data or no variability
}
}
# Set column names
names(jensens_alpha_garch) <- colnames(initial_estimation_df)
print("Jensen's Alpha using GARCH Model:")
print(head(jensens_alpha_garch))
# Initialize a vector to store Jensen's alpha values using EGARCH model with Student-t errors
jensens_alpha_egarch <- numeric(ncol(initial_estimation_df))
# Loop through each fund
for (i in 1:ncol(initial_estimation_df)) {
fund_data <- na.omit(as.numeric(initial_estimation_df[, i]))  # Ensure data is numeric and remove NAs
# Fit the EGARCH model only if there are enough observations and sufficient variability
if (length(fund_data) > 1 && sd(fund_data) != 0) {
tryCatch({
spec <- ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "std")
fit <- ugarchfit(spec, data = fund_data)
alpha <- coef(fit)["mu"]
jensens_alpha_egarch[i] <- alpha  # Store alpha from EGARCH model
}, error = function(e) {
cat("Error fitting EGARCH model for fund", i, ":", e$message, "\n")
jensens_alpha_egarch[i] <- NA  # Handle model fitting errors
})
} else {
cat("Insufficient data or no variability for fund", i, "\n")
jensens_alpha_egarch[i] <- NA  # Handle insufficient data or no variability
}
}
# Set column names
names(jensens_alpha_egarch) <- colnames(initial_estimation_df)
print("Jensen's Alpha using EGARCH Model with Student-t errors:")
print(head(jensens_alpha_egarch))
# Select top 10 funds based on Sharpe ratios
top_10_funds_indices <- order(sharpe_ratios, decreasing = TRUE)[1:10]
# Prepare the data for plotting
jensen_alpha_data <- data.frame(
Fund = colnames(initial_estimation_df)[top_10_funds_indices],
Single_Factor = jensens_alpha_single[top_10_funds_indices],
Multiple_Regression = jensens_alpha_multiple[top_10_funds_indices],
GARCH = jensens_alpha_garch[top_10_funds_indices],
EGARCH = jensens_alpha_egarch[top_10_funds_indices]
)
# Melt the data for easy plotting with ggplot2
library(reshape2)
jensen_alpha_melted <- melt(jensen_alpha_data, id.vars = "Fund")
# Plot using ggplot2
library(ggplot2)
ggplot(jensen_alpha_melted, aes(x = Fund, y = value, fill = variable)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = "Comparison of Jensen's Alpha Across Models (Top 10 Funds)", y = "Jensen's Alpha", x = "Fund") +
theme_minimal()
# Load necessary libraries for portfolio optimization
if (!require(quadprog)) install.packages("quadprog", dependencies=TRUE)
# Select the top 10 funds based on Sharpe ratios
top_10_funds_indices <- order(sharpe_ratios, decreasing = TRUE)[1:10]
# Select the top 10 funds based on Sharpe ratios
top_10_funds_indices <- order(sharpe_ratios, decreasing = TRUE)[1:10]
top_10_funds <- initial_estimation_df[, top_10_funds_indices]
# Handle NA values by replacing them with the mean of each fund
top_10_funds <- apply(top_10_funds, 2, function(x) {
if (any(is.na(x))) {
x[is.na(x)] <- mean(x, na.rm = TRUE)
}
return(x)
})
# Calculate the mean returns and the covariance matrix for the top 10 funds
mean_returns <- colMeans(top_10_funds)
cov_matrix <- cov(top_10_funds)
# Define the number of assets
num_assets <- ncol(top_10_funds)
# Ensure there are no NA/NaN/Inf values in the covariance matrix
if (any(is.na(cov_matrix)) || any(is.nan(cov_matrix)) || any(is.infinite(cov_matrix))) {
stop("Covariance matrix contains NA/NaN/Inf values. Please check the input data.")
}
# Define the constraints for the optimization
# 1. Sum of weights = 1
# 2. No short selling, i.e., weights >= 0
Amat <- cbind(rep(1, num_assets), diag(num_assets))
bvec <- c(1, rep(0, num_assets))
meq <- 1
# Perform mean-variance optimization to find the minimum variance portfolio
opt_result_min_var <- solve.QP(Dmat = cov_matrix, dvec = rep(0, num_assets), Amat = Amat, bvec = bvec, meq = meq)
optimal_weights_min_var <- opt_result_min_var$solution
# Calculate the portfolio returns for the out-of-sample period
top_10_returns_out_sample <- out_of_sample_period[, top_10_funds_indices]
portfolio_returns_min_var <- rowSums(top_10_returns_out_sample * optimal_weights_min_var, na.rm = TRUE)
# Convert to a timeSeries object
portfolio_returns_min_var_ts <- timeSeries(portfolio_returns_min_var, time(out_of_sample_period))
# Plot the cumulative returns of the optimized portfolio
cum_returns_min_var <- cumprod(1 + portfolio_returns_min_var_ts)
plot(cum_returns_min_var, type = "l", col = "blue", lwd = 2, xlab = "Date", ylab = "Cumulative Returns", main = "Cumulative Returns of Minimum Variance Portfolio (Sample Estimate)")
legend("topleft", legend = c("Minimum Variance Portfolio"), col = c("blue"), lwd = 2)
# Print the optimal weights for the minimum variance portfolio
cat("Optimal Weights for the Minimum Variance Portfolio based on Sample Estimates:\n")
print(optimal_weights_min_var)
# Define the target return (monthly basis)
R_target <- 0.01
# Perform mean-variance optimization to find the mean-variance portfolio
optimize_mean_variance_portfolio <- function(mean_returns, cov_matrix, R_target) {
num_assets <- length(mean_returns)
# Define constraints
Amat <- cbind(rep(1, num_assets), mean_returns, diag(num_assets))
bvec <- c(1, R_target, rep(0, num_assets))
meq <- 2
opt_result <- solve.QP(Dmat = cov_matrix, dvec = rep(0, num_assets), Amat = Amat, bvec = bvec, meq = meq)
return(opt_result$solution)
}
# Perform mean-variance optimization
optimal_weights_mv <- optimize_mean_variance_portfolio(mean_returns, cov_matrix, R_target)
# Calculate mean-variance portfolio returns
portfolio_returns_mv <- rowSums(top_10_returns_out_sample * optimal_weights_mv, na.rm = TRUE)
portfolio_returns_mv_ts <- timeSeries(portfolio_returns_mv, time(out_of_sample_period))
# Plot cumulative returns for mean-variance portfolio
cum_returns_mv <- cumprod(1 + portfolio_returns_mv_ts)
plot(cum_returns_mv, type = "l", col = "red", lwd = 2, xlab = "Date", ylab = "Cumulative Returns", main = "Cumulative Returns of Mean-Variance Portfolio (Sample Estimate)")
legend("topleft", legend = c("Mean-Variance Portfolio"), col = c("red"), lwd = 2)
# Print the optimal weights for the mean-variance portfolio
cat("Optimal Weights for the Mean-Variance Portfolio based on Sample Estimates:\n")
print(optimal_weights_mv)
# Function to print performance metrics
print_performance_metrics <- function(portfolio_returns, title) {
cat(title, "\n")
cat("Annualized Return:", Return.annualized(portfolio_returns), "\n")
cat("Annualized Sharpe Ratio:", SharpeRatio.annualized(portfolio_returns), "\n")
}
# Print performance metrics for both portfolios
print_performance_metrics(portfolio_returns_min_var_ts, "Performance Metrics (Minimum Variance Portfolio)")
print_performance_metrics(portfolio_returns_mv_ts, "Performance Metrics (Mean-Variance Portfolio)")
# Select the top 10 funds based on Sharpe ratios
top_10_funds_indices <- order(sharpe_ratios, decreasing = TRUE)[1:10]
top_10_funds <- initial_estimation_df[, top_10_funds_indices]
# Handle NA values by replacing them with the mean of each fund
top_10_funds <- apply(top_10_funds, 2, function(x) {
if (any(is.na(x))) {
x[is.na(x)] <- mean(x, na.rm = TRUE)
}
return(x)
})
# Estimate Single Index Model parameters
factor_returns <- initial_factors_df[, "Mkt.RF"]
N <- ncol(top_10_funds)
alphas <- numeric(N)
betas <- numeric(N)
sigmas2 <- numeric(N)
for (i in 1:N) {
model <- lm(top_10_funds[, i] ~ factor_returns)
alphas[i] <- coef(model)[1]
betas[i] <- coef(model)[2]
residuals <- residuals(model)
sigmas2[i] <- var(residuals)
}
# Expected returns and covariance matrix based on SIM
ExpRet_SIM <- alphas + betas * mean(factor_returns)
CovRet_SIM <- var(factor_returns) * (betas %*% t(betas)) + diag(sigmas2)
# Constraints for minimum variance portfolio
Dmat <- 2 * CovRet_SIM
dvec <- rep(0, N)
Amat <- cbind(rep(1, N), diag(N))
bvec <- c(1, rep(0, N))
meq <- 1
# Solve the quadratic programming problem for minimum variance portfolio
opt_result_minvar <- solve.QP(Dmat = Dmat, dvec = dvec, Amat = Amat, bvec = bvec, meq = meq)
# Optimal weights for minimum variance portfolio
optimal_weights_minvar <- opt_result_minvar$solution
# Determine a feasible target return based on mean returns
target_return <- mean(mean_returns)  # Set target return as the mean of mean returns
# Constraints for mean-variance portfolio with a target return
Amat_mv <- cbind(rep(1, N), ExpRet_SIM, diag(N))
bvec_mv <- c(1, target_return, rep(0, N))
# Check if the constraints are feasible
if (all(target_return >= min(ExpRet_SIM) & target_return <= max(ExpRet_SIM))) {
# Solve the quadratic programming problem for mean-variance portfolio
opt_result_meanvar <- solve.QP(Dmat = Dmat, dvec = dvec, Amat = Amat_mv, bvec = bvec_mv, meq = 2)
# Optimal weights for mean-variance portfolio
optimal_weights_meanvar <- opt_result_meanvar$solution
# Calculate portfolio returns for the out-of-sample period
portfolio_returns_minvar <- rowSums(out_of_sample_period[, top_10_funds_indices] * optimal_weights_minvar, na.rm = TRUE)
portfolio_returns_meanvar <- rowSums(out_of_sample_period[, top_10_funds_indices] * optimal_weights_meanvar, na.rm = TRUE)
# Convert to timeSeries objects
portfolio_returns_minvar_ts <- timeSeries(portfolio_returns_minvar, time(out_of_sample_period))
portfolio_returns_meanvar_ts <- timeSeries(portfolio_returns_meanvar, time(out_of_sample_period))
# Plot the cumulative returns of the portfolios
cum_returns_minvar <- cumprod(1 + portfolio_returns_minvar_ts)
cum_returns_meanvar <- cumprod(1 + portfolio_returns_meanvar_ts)
plot(cum_returns_minvar, type = "l", col = "red", lwd = 2, xlab = "Date", ylab = "Cumulative Returns", main = "Cumulative Returns of Portfolios (SIM)")
lines(cum_returns_meanvar, col = "blue", lwd = 2)
legend("topleft", legend = c("Minimum Variance Portfolio", "Mean-Variance Portfolio"), col = c("red", "blue"), lwd = 2)
# Print the optimal weights
cat("Optimal Weights for the Minimum Variance Portfolio (SIM):\n")
print(optimal_weights_minvar)
cat("Optimal Weights for the Mean-Variance Portfolio (SIM):\n")
print(optimal_weights_meanvar)
} else {
cat("The target return is not feasible with the given constraints.\n")
}
# Estimate multivariate multiple regression model parameters
factors_matrix <- as.matrix(initial_factors_df[, c("Mkt.RF", "SMB", "HML")])
N <- ncol(top_10_funds)
gamma_matrix <- matrix(0, nrow = N, ncol = 3)
residuals_matrix <- matrix(0, nrow = nrow(top_10_funds), ncol = N)
for (i in 1:N) {
model <- lm(top_10_funds[, i] ~ factors_matrix)
gamma_matrix[i, ] <- coef(model)[-1]
residuals_matrix[, i] <- residuals(model)
}
# Calculate expected returns and covariance matrix based on multivariate regression model
mean_factors <- colMeans(factors_matrix)
ExpRet_MR <- gamma_matrix %*% mean_factors
CovRet_MR <- gamma_matrix %*% cov(factors_matrix) %*% t(gamma_matrix) + cov(residuals_matrix)
# Constraints for minimum variance portfolio
Dmat_MR <- 2 * CovRet_MR
dvec_MR <- rep(0, N)
Amat_MR <- cbind(rep(1, N), diag(N))
bvec_MR <- c(1, rep(0, N))
meq_MR <- 1
# Solve the quadratic programming problem for minimum variance portfolio
opt_result_minvar_MR <- solve.QP(Dmat = Dmat_MR, dvec = dvec_MR, Amat = Amat_MR, bvec = bvec_MR, meq = meq_MR)
# Optimal weights for minimum variance portfolio based on multivariate regression model
optimal_weights_minvar_MR <- opt_result_minvar_MR$solution
# Determine a feasible target return based on mean returns
target_return_MR <- mean(ExpRet_MR)  # Set target return as the mean of mean returns
# Constraints for mean-variance portfolio with a target return
Amat_mv_MR <- cbind(rep(1, N), ExpRet_MR, diag(N))
bvec_mv_MR <- c(1, target_return_MR, rep(0, N))
# Check if the constraints are feasible
if (all(target_return_MR >= min(ExpRet_MR) & target_return_MR <= max(ExpRet_MR))) {
# Solve the quadratic programming problem for mean-variance portfolio
opt_result_meanvar_MR <- solve.QP(Dmat = Dmat_MR, dvec = dvec_MR, Amat = Amat_mv_MR, bvec = bvec_mv_MR, meq = 2)
# Optimal weights for mean-variance portfolio based on multivariate regression model
optimal_weights_meanvar_MR <- opt_result_meanvar_MR$solution
# Calculate portfolio returns for the out-of-sample period
portfolio_returns_minvar_MR <- rowSums(out_of_sample_period[, top_10_funds_indices] * optimal_weights_minvar_MR, na.rm = TRUE)
portfolio_returns_meanvar_MR <- rowSums(out_of_sample_period[, top_10_funds_indices] * optimal_weights_meanvar_MR, na.rm = TRUE)
# Convert to timeSeries objects
portfolio_returns_minvar_MR_ts <- timeSeries(portfolio_returns_minvar_MR, time(out_of_sample_period))
portfolio_returns_meanvar_MR_ts <- timeSeries(portfolio_returns_meanvar_MR, time(out_of_sample_period))
# Plot the cumulative returns of the portfolios
cum_returns_minvar_MR <- cumprod(1 + portfolio_returns_minvar_MR_ts)
cum_returns_meanvar_MR <- cumprod(1 + portfolio_returns_meanvar_MR_ts)
plot(cum_returns_minvar_MR, type = "l", col = "red", lwd = 2, xlab = "Date", ylab = "Cumulative Returns", main = "Cumulative Returns of Portfolios (Multivariate Regression)")
lines(cum_returns_meanvar_MR, col = "blue", lwd = 2)
legend("topleft", legend = c("Minimum Variance Portfolio", "Mean-Variance Portfolio"), col = c("red", "blue"), lwd = 2)
# Print the optimal weights
cat("Optimal Weights for the Minimum Variance Portfolio (Multivariate Regression):\n")
print(optimal_weights_minvar_MR)
cat("Optimal Weights for the Mean-Variance Portfolio (Multivariate Regression):\n")
print(optimal_weights_meanvar_MR)
} else {
cat("The target return is not feasible with the given constraints.\n")
}
# Print performance metrics for multivariate regression portfolios
print_performance_metrics(portfolio_returns_minvar_MR_ts, "Performance Metrics (Minimum Variance Portfolio - Multivariate Regression)")
print_performance_metrics(portfolio_returns_meanvar_MR_ts, "Performance Metrics (Mean-Variance Portfolio - Multivariate Regression)")
# Estimate Fama-French 5-Factor Model parameters
factors_matrix_ff5 <- as.matrix(initial_factors_df[, c("Mkt.RF", "SMB", "HML", "RMW", "CMA")])
N <- ncol(top_10_funds)
gamma_matrix_ff5 <- matrix(0, nrow = N, ncol = 5)
residuals_matrix_ff5 <- matrix(0, nrow = nrow(top_10_funds), ncol = N)
for (i in 1:N) {
model <- lm(top_10_funds[, i] ~ factors_matrix_ff5)
gamma_matrix_ff5[i, ] <- coef(model)[-1]
residuals_matrix_ff5[, i] <- residuals(model)
}
# Calculate expected returns and covariance matrix based on Fama-French 5-Factor Model
mean_factors_ff5 <- colMeans(factors_matrix_ff5)
ExpRet_FF5 <- gamma_matrix_ff5 %*% mean_factors_ff5
CovRet_FF5 <- gamma_matrix_ff5 %*% cov(factors_matrix_ff5) %*% t(gamma_matrix_ff5) + cov(residuals_matrix_ff5)
# Constraints for minimum variance portfolio
Dmat_FF5 <- 2 * CovRet_FF5
dvec_FF5 <- rep(0, N)
Amat_FF5 <- cbind(rep(1, N), diag(N))
bvec_FF5 <- c(1, rep(0, N))
meq_FF5 <- 1
# Solve the quadratic programming problem for minimum variance portfolio
opt_result_minvar_FF5 <- solve.QP(Dmat = Dmat_FF5, dvec = dvec_FF5, Amat = Amat_FF5, bvec = bvec_FF5, meq = meq_FF5)
# Optimal weights for minimum variance portfolio based on Fama-French 5-Factor Model
optimal_weights_minvar_FF5 <- opt_result_minvar_FF5$solution
# Determine a feasible target return based on mean returns
target_return_FF5 <- mean(ExpRet_FF5)  # Set target return as the mean of mean returns
# Constraints for mean-variance portfolio with a target return
Amat_mv_FF5 <- cbind(rep(1, N), ExpRet_FF5, diag(N))
bvec_mv_FF5 <- c(1, target_return_FF5, rep(0, N))
# Check if the constraints are feasible
if (all(target_return_FF5 >= min(ExpRet_FF5) & target_return_FF5 <= max(ExpRet_FF5))) {
# Solve the quadratic programming problem for mean-variance portfolio
opt_result_meanvar_FF5 <- solve.QP(Dmat = Dmat_FF5, dvec = dvec_FF5, Amat = Amat_mv_FF5, bvec = bvec_mv_FF5, meq = 2)
# Optimal weights for mean-variance portfolio based on Fama-French 5-Factor Model
optimal_weights_meanvar_FF5 <- opt_result_meanvar_FF5$solution
# Calculate portfolio returns for the out-of-sample period
portfolio_returns_minvar_FF5 <- rowSums(out_of_sample_period[, top_10_funds_indices] * optimal_weights_minvar_FF5, na.rm = TRUE)
portfolio_returns_meanvar_FF5 <- rowSums(out_of_sample_period[, top_10_funds_indices] * optimal_weights_meanvar_FF5, na.rm = TRUE)
# Convert to timeSeries objects
portfolio_returns_minvar_FF5_ts <- timeSeries(portfolio_returns_minvar_FF5, time(out_of_sample_period))
portfolio_returns_meanvar_FF5_ts <- timeSeries(portfolio_returns_meanvar_FF5, time(out_of_sample_period))
# Plot the cumulative returns of the portfolios
cum_returns_minvar_FF5 <- cumprod(1 + portfolio_returns_minvar_FF5_ts)
cum_returns_meanvar_FF5 <- cumprod(1 + portfolio_returns_meanvar_FF5_ts)
plot(cum_returns_minvar_FF5, type = "l", col = "red", lwd = 2, xlab = "Date", ylab = "Cumulative Returns", main = "Cumulative Returns of Portfolios (Fama-French 5-Factor Model)")
lines(cum_returns_meanvar_FF5, col = "blue", lwd = 2)
legend("topleft", legend = c("Minimum Variance Portfolio", "Mean-Variance Portfolio"), col = c("red", "blue"), lwd = 2)
# Print the optimal weights
cat("Optimal Weights for the Minimum Variance Portfolio (Fama-French 5-Factor Model):\n")
print(optimal_weights_minvar_FF5)
cat("Optimal Weights for the Mean-Variance Portfolio (Fama-French 5-Factor Model):\n")
print(optimal_weights_meanvar_FF5)
} else {
cat("The target return is not feasible with the given constraints.\n")
}
# Print performance metrics for Fama-French 5-Factor Model portfolios
print_performance_metrics(portfolio_returns_minvar_FF5_ts, "Performance Metrics (Minimum Variance Portfolio - Fama-French 5-Factor Model)")
print_performance_metrics(portfolio_returns_meanvar_FF5_ts, "Performance Metrics (Mean-Variance Portfolio - Fama-French 5-Factor Model)")
# Create a data frame for the cumulative returns
cum_returns_df <- data.frame(
Date = as.Date(time(portfolio_returns_minvar_FF5_ts)),
Min_Var = cum_returns_minvar_FF5,
Mean_Var = cum_returns_meanvar_FF5
)
# Melt the data frame for easy plotting with ggplot2
cum_returns_melted <- melt(cum_returns_df, id.vars = "Date")
# Plot using ggplot2
ggplot(cum_returns_melted, aes(x = Date, y = value, color = variable)) +
geom_line(size = 1) +
labs(title = "Cumulative Returns of Portfolios (Fama-French 5-Factor Model)",
x = "Date", y = "Cumulative Returns") +
scale_color_manual(values = c("red", "blue"), labels = c("Minimum Variance Portfolio", "Mean-Variance Portfolio")) +
theme_minimal() +
theme(legend.title = element_blank(), legend.position = "top")
